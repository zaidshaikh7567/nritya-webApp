'use client';
import { useEffect, useState } from "react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import dynamic from 'next/dynamic';
import { Skeleton } from '@mui/material';
import { 
  Button, 
  Card, 
  CardContent, 
  Typography, 
  Box, 
  Chip, 
  Grid, 
  Container,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  TextField,
  FormControl,
  FormControlLabel,
  Radio,
  RadioGroup,
  Alert,
  Avatar,
  Rating,
  Divider
} from "@mui/material";
import { 
  Camera, 
  ArrowBack, 
  LocationOn, 
  Star, 
  AccessTime, 
  AttachMoney, 
  Group, 
  Wifi, 
  DirectionsCar, 
  Coffee, 
  CheckCircle,
  CalendarToday,
  Schedule,
  Payment,
  Person,
  Email,
  Phone
} from "@mui/icons-material";
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DateCalendar } from '@mui/x-date-pickers/DateCalendar';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

import { format, addDays, isSameDay, startOfDay } from "date-fns";

// Dynamic imports for client components
const ClientHeader = dynamic(() => import('../components/ClientHeader'), {
  ssr: false,
  loading: () => (
    <div style={{ 
      width: '100%', 
      height: '7vh', 
      backgroundColor: "black", 
      position: 'sticky', 
      top: 0, 
      zIndex: 1000 
    }}>
      <Skeleton variant="rectangular" animation="wave" sx={{ height: '100%' }} />
    </div>
  )
});

const ClientFooter = dynamic(() => import('../components/ClientFooter'), {
  ssr: false
});

export default function BookStudio() {
  const searchParams = useSearchParams();
  const studioId = searchParams.get("id") || "1";
  
  // Get user info from localStorage
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [selectedTimeSlots, setSelectedTimeSlots] = useState([]);
  const [timeSlots, setTimeSlots] = useState([]);
  const [step, setStep] = useState(1); // 1: Date/Time, 2: Details, 3: Payment
  const [bookingData, setBookingData] = useState({
    clientName:  '',
    clientEmail:  '',
    clientPhone: '',
    notes: ''
  });


  // Update time slots when date changes
  useEffect(() => {
      // Generate time slots for state management
  const generateTimeSlots2 = (date) => {
    const slots = [];
    const startHour = 8; // 8 AM
    const endHour = 24; // 12 AM (midnight)
    const unavailable = [0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,0,0,0];
    const booked =      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];
    
    for (let hour = startHour; hour < endHour; hour++) {
      const timeSlot = `${hour.toString().padStart(2, '0')}:00-${(hour + 1).toString().padStart(2, '0')}:00`;
      const arrayIndex = hour; // Convert hour to array index
      let isAvailable = false;
      let isBooked = false;
      let isUnavailable = true;
      console.log(arrayIndex, unavailable[arrayIndex] === 1, booked[arrayIndex] === 1 )
      if (unavailable[arrayIndex] === 1) {
        if (booked[arrayIndex] === 1) {
          isAvailable = false;
          isBooked = true;
          isUnavailable = false;
        }else{
          isAvailable = true;
          isBooked = false;
          isUnavailable = false;
        }
      } else {
          isAvailable = false;
          isBooked = false;
          isUnavailable = true;
      }
      console.log(isAvailable, isBooked, isUnavailable)

      const price = studio.basePrice + (hour >= 18 ? 50 : 0); // Evening premium
      
      slots.push({
        time: timeSlot,
        hour: hour,
        available: isAvailable,
        unavailable: isUnavailable,
        booked: isBooked,
        price: price,
        displayTime: `${hour === 12 ? 12 : hour > 12 ? hour - 12 : hour}:00 ${hour >= 12 ? 'PM' : 'AM'} - ${hour + 1 === 12 ? 12 : (hour + 1) > 12 ? (hour + 1) - 12 : hour + 1}:00 ${hour + 1 >= 12 ? 'PM' : 'AM'}`
      });
    }
    return slots;
  };
    const newTimeSlots = generateTimeSlots2(selectedDate);
    console.log(newTimeSlots)
    setTimeSlots(newTimeSlots);
  }, [selectedDate]);

  useEffect(() => {
    const userInfoFull = JSON.parse(localStorage.getItem('userInfoFull') || 'null');
    if (userInfoFull) {
      setBookingData({
        clientName: userInfoFull.displayName,
        clientEmail: userInfoFull.email,
        clientPhone: '',
        notes: ''
      });
    }
  }, []);

  // Mock studio data - in real app this would come from API
  const studio = {
    id: studioId,
    name: "Sunset Sound Studios",
    type: "Recording Studio",
    location: "Los Angeles, CA",
    basePrice: 150,
    rating: 4.9,
    reviews: 124,
    image: "/placeholder.svg",
    amenities: ["Professional Equipment", "Mixing Console", "Isolation Booth", "WiFi", "Parking", "Coffee"],
    description: "Professional recording studio with state-of-the-art equipment and acoustics. Perfect for music recording, mixing, and mastering.",
    rules: ["No smoking", "Maximum 8 people", "Clean up after use"],
    cancellation: "Free cancellation up to 24 hours before booking"
  };




  const totalPrice = selectedTimeSlots.reduce((total, slot) => {
    const slotData = timeSlots.find(s => s.time === slot);
    return total + (slotData?.price || 0);
  }, 0);

  const toggleTimeSlot = (timeSlot) => {
    setSelectedTimeSlots(prev => 
      prev.includes(timeSlot) 
        ? prev.filter(s => s !== timeSlot)
        : [...prev, timeSlot].sort()
    );
  };

  const isDateDisabled = (date) => {
    const today = startOfDay(new Date());
    const maxDate = addDays(today, 90); // 3 months ahead
    return date < today || date > maxDate;
  };

  const steps = [
    {
      label: 'Select Date & Time',
      description: 'Choose your preferred date and time slots'
    },
    {
      label: 'Booking Details',
      description: 'Enter your contact information and preferences'
    },
    {
      label: 'Review & Confirm',
      description: 'Review your booking details and confirm'
    }
  ];

  return (
    <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>
      <ClientHeader />
      <main className='py-1 flex-grow-1' style={{ width: '100%' }}>
        <Box sx={{ minHeight: '100vh', bgcolor: 'background.default' }}>
          <Container maxWidth="lg" sx={{ py: 4 }}>
            {/* Back Button */}
            <Box sx={{ mb: 3 }}>
              <Link href="/" style={{ textDecoration: 'none' }}>
                <Button variant="text" startIcon={<ArrowBack />}>
                  Back to Studios
                </Button>
              </Link>
            </Box>

            {/* Progress Indicator */}
            <Box sx={{ mb: 4 }}>
              <Stepper activeStep={step - 1} sx={{ justifyContent: 'center' }}>
                {steps.map((stepItem, index) => (
                  <Step key={stepItem.label}>
                    <StepLabel>{stepItem.label}</StepLabel>
                  </Step>
                ))}
              </Stepper>
            </Box>

            <Grid container spacing={4}>
              {/* Main Booking Content */}
              <Grid item xs={12} lg={8}>
                {step === 1 && (
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                    <Box>
                      <Typography variant="h5" sx={{ mb: 1, color: 'text.primary', textTransform:'none' }}>
                        Select Date & Time
                      </Typography>
                      <Typography variant="body1" sx={{ color: 'text.secondary', textTransform:'none' }}>
                        Choose your preferred date and time slots
                      </Typography>
                    </Box>

                    {/* Date Selection */}
                    <Card>
                      <CardContent>
                        <Typography variant="h6" sx={{ mb: 2 , textTransform:'none'}}>
                          Select Date
                        </Typography>
                        <Typography variant="body2" sx={{ mb: 3, color: 'text.secondary' }}>
                          Available dates for the next 3 months
                        </Typography>
                        <Box sx={{ 
                          display: 'grid', 
                          gridTemplateColumns: 'repeat(7, 1fr)', 
                          gap: 1,
                          maxWidth: 400
                        }}>
                          <LocalizationProvider dateAdapter={AdapterDateFns}>
                            <DateCalendar
                              value={selectedDate}
                              onChange={(newValue) => setSelectedDate(newValue)}
                              disablePast
                              shouldDisableDate={isDateDisabled}
                            />
                          </LocalizationProvider>
                        </Box>
                      </CardContent>
                    </Card>

                    {/* Time Slots */}
                    <Card>
                      <CardContent>
                        <Typography variant="h6" sx={{ mb: 2, textTransform:'none' }}>
                          Available Time Slots - {format(selectedDate, 'EEEE, MMMM d, yyyy')}
                        </Typography>
                        <Typography variant="body2" sx={{ mb: 3, color: 'text.secondary' }}>
                          Select one or more consecutive hours
                        </Typography>
                        
                        {/* Color Legend */}
                        <Box sx={{ mb: 3, display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Box sx={{ width: 12, height: 12, borderRadius: '50%', bgcolor: '#2e7d32' }} />
                            <Typography variant="caption" sx={{ color: 'text.secondary' }}>
                              Available
                            </Typography>
                          </Box>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Box sx={{ width: 12, height: 12, borderRadius: '50%', bgcolor: '#d32f2f' }} />
                            <Typography variant="caption" sx={{ color: 'text.secondary' }}>
                              Booked
                            </Typography>
                          </Box>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Box sx={{ width: 12, height: 12, borderRadius: '50%', bgcolor: '#9e9e9e' }} />
                            <Typography variant="caption" sx={{ color: 'text.secondary' }}>
                              Unavailable
                            </Typography>
                          </Box>
                        </Box>
                        <Grid container spacing={2}>
                          {timeSlots.map((slot) => (
                          
                            <Grid item xs={12} sm={6} md={4} key={slot.time}>
                              <Button
                                variant={selectedTimeSlots.includes(slot.time) ? "contained" : "outlined"}
                                disabled={!slot.available}
                                onClick={() => toggleTimeSlot(slot.time)}
                                sx={{ 
                                  width: '100%',
                                  height: 'auto',
                                  flexDirection: 'column',
                                  py: 2,
                                  position: 'relative',
                                  ...(slot.booked && {
                                    bgcolor: '#ffebee', // Light red background
                                    color: '#d32f2f', // Red text
                                    border: '2px solid #d32f2f',
                                    '&:hover': {
                                      bgcolor: '#ffcdd2'
                                    }
                                  }),
                                  ...(slot.unavailable && {
                                    bgcolor: '#f5f5f5', // Light grey background
                                    color: '#9e9e9e', // Grey text
                                    border: '2px solid #9e9e9e',
                                    '&:hover': {
                                      bgcolor: '#eeeeee'
                                    }
                                  }),
                                  ...(slot.available && {
                                    bgcolor: '#e8f5e8', // Light green background
                                    color: '#2e7d32', // Green text
                                    border: '2px solid #2e7d32',
                                    '&:hover': {
                                      bgcolor: '#c8e6c9'
                                    }
                                  }),
                                  ...(selectedTimeSlots.includes(slot.time) && {
                                    bgcolor: '#1976d2', // Blue when selected
                                    color: 'white',
                                    border: '2px solid #1976d2',
                                    '&:hover': {
                                      bgcolor: '#1565c0'
                                    }
                                  })
                                }}
                              >
                                <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                                  {slot.displayTime}
                                </Typography>
                                <Typography variant="caption" sx={{ opacity: 0.8 }}>
                                  ₹{slot.price}/hr
                                 
                                </Typography>
                                {/* Status indicator dot */}
                                <Box
                                  sx={{
                                    position: 'absolute',
                                    top: 8,
                                    right: 8,
                                    width: 12,
                                    height: 12,
                                    borderRadius: '50%',
                                    ...(slot.booked && {
                                      bgcolor: '#d32f2f' // Red dot for booked
                                    }),
                                    ...(slot.unavailable && {
                                      bgcolor: '#9e9e9e' // Grey dot for unavailable
                                    }),
                                    ...(slot.available && {
                                      bgcolor: '#2e7d32' // Green dot for available
                                    }),
                                    ...(selectedTimeSlots.includes(slot.time) && {
                                      bgcolor: 'white' // White dot when selected
                                    })
                                  }}
                                />
                              </Button>
                            </Grid>
                          ))}
                        </Grid>
                      </CardContent>
                    </Card>

                    {selectedTimeSlots.length > 0 && (
                      <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                        <Button 
                          variant="contained" 
                          size="large"
                          onClick={() => setStep(2)}
                        >
                          Continue to Details
                        </Button>
                      </Box>
                    )}
                  </Box>
                )}

                {step === 2 && (
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                    <Box>
                      <Typography variant="h4" sx={{ mb: 1, color: 'text.primary' }}>
                        Booking Details
                      </Typography>
                      <Typography variant="body1" sx={{ color: 'text.secondary' }}>
                        Review your booking and add any special requests
                      </Typography>
                    </Box>

                    <Card>
                      <CardContent>
                        <Typography variant="h6" sx={{ mb: 3 }}>
                          Your Booking Summary
                        </Typography>
                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="body1" sx={{ fontWeight: 'medium' }}>Date:</Typography>
                            <Typography variant="body1">{format(selectedDate, 'EEEE, MMMM d, yyyy')}</Typography>
                          </Box>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="body1" sx={{ fontWeight: 'medium' }}>Time Slots:</Typography>
                            <Typography variant="body1">{selectedTimeSlots.length} hour{selectedTimeSlots.length > 1 ? 's' : ''}</Typography>
                          </Box>
                          <Divider />
                          {selectedTimeSlots.map(slot => {
                            const slotData = timeSlots.find(s => s.time === slot);
                            return (
                              <Box key={slot} sx={{ display: 'flex', justifyContent: 'space-between' }}>
                                <Typography variant="body2">{slotData?.displayTime}</Typography>
                                <Typography variant="body2">₹{slotData?.price}</Typography>
                              </Box>
                            );
                          })}
                          <Divider />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="h6">Total:</Typography>
                            <Typography variant="h6">₹{totalPrice}</Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>

                    <Card>
                      <CardContent>
                        <Typography variant="h6" sx={{ mb: 3 }}>
                          Contact Information
                        </Typography>
                        <Grid container spacing={3}>
                          <Grid item xs={12} sm={6}>
                            <TextField
                              fullWidth
                              label="Full Name"
                              value={bookingData.clientName}
                              onChange={(e) => setBookingData({ ...bookingData, clientName: e.target.value })}
                              required
                            />
                          </Grid>
                          <Grid item xs={12} sm={6}>
                            <TextField
                              fullWidth
                              label="Email"
                              type="email"
                              value={bookingData.clientEmail}
                              onChange={(e) => setBookingData({ ...bookingData, clientEmail: e.target.value })}
                              required
                            />
                          </Grid>
                          <Grid item xs={12} sm={6}>
                            <TextField
                              fullWidth
                              label="Phone Number"
                              value={bookingData.clientPhone}
                              onChange={(e) => setBookingData({ ...bookingData, clientPhone: e.target.value })}
                            />
                          </Grid>
                          <Grid item xs={12}>
                            <TextField
                              fullWidth
                              label="Special Requests or Notes"
                              multiline
                              rows={3}
                              value={bookingData.notes}
                              onChange={(e) => setBookingData({ ...bookingData, notes: e.target.value })}
                            />
                          </Grid>
                        </Grid>
                      </CardContent>
                    </Card>

                    <Card>
                      <CardContent>
                        <Typography variant="h6" sx={{ mb: 3 }}>
                          Studio Rules & Policies
                        </Typography>
                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
                          <Box>
                            <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 'medium' }}>
                              Studio Rules:
                            </Typography>
                            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                              {studio.rules.map((rule, index) => (
                                <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                  <CheckCircle sx={{ color: 'success.main', fontSize: 20 }} />
                                  <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                                    {rule}
                                  </Typography>
                                </Box>
                              ))}
                            </Box>
                          </Box>
                          <Box>
                            <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 'medium' }}>
                              Cancellation Policy:
                            </Typography>
                            <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                              {studio.cancellation}
                            </Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>

                    <Box sx={{ display: 'flex', gap: 2 }}>
                      <Button variant="outlined" onClick={() => setStep(1)}>
                        Back
                      </Button>
                      <Button 
                        variant="contained" 
                        size="large"
                        onClick={() => setStep(3)}
                        sx={{ flex: 1 }}
                      >
                        Continue to Payment
                      </Button>
                    </Box>
                  </Box>
                )}

                {step === 3 && (
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
                    <Box>
                      <Typography variant="h4" sx={{ mb: 1, color: 'text.primary' }}>
                        Payment
                      </Typography>
                      <Typography variant="body1" sx={{ color: 'text.secondary' }}>
                        Complete your booking
                      </Typography>
                    </Box>

                    <Card>
                      <CardContent>
                        <Typography variant="h6" sx={{ mb: 2 }}>
                          Payment Details
                        </Typography>
                        <Typography variant="body2" sx={{ mb: 3, color: 'text.secondary' }}>
                          This is a demo - no actual payment will be processed
                        </Typography>
                        <Alert severity="success" sx={{ mb: 3 }}>
                          <Typography variant="h6" sx={{ mb: 1 }}>
                            Booking Confirmed!
                          </Typography>
                          <Typography variant="body2">
                            Your booking request has been sent to the studio owner. You'll receive a confirmation email shortly.
                          </Typography>
                        </Alert>
                        <Box sx={{ 
                          bgcolor: 'grey.100', 
                          p: 3, 
                          borderRadius: 1,
                          display: 'flex',
                          flexDirection: 'column',
                          gap: 1
                        }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="body2">Studio:</Typography>
                            <Typography variant="body2" sx={{ fontWeight: 'medium' }}>{studio.name}</Typography>
                          </Box>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="body2">Date:</Typography>
                            <Typography variant="body2" sx={{ fontWeight: 'medium' }}>{format(selectedDate, 'MMM d, yyyy')}</Typography>
                          </Box>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="body2">Duration:</Typography>
                            <Typography variant="body2" sx={{ fontWeight: 'medium' }}>{selectedTimeSlots.length} hours</Typography>
                          </Box>
                          <Divider />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="h6">Total:</Typography>
                            <Typography variant="h6">₹{totalPrice}</Typography>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>

                    <Box sx={{ display: 'flex', gap: 2 }}>
                      <Button variant="outlined" onClick={() => setStep(2)}>
                        Back
                      </Button>
                      <Link href="/" style={{ textDecoration: 'none', flex: 1 }}>
                        <Button variant="contained" size="large" sx={{ width: '100%' }}>
                          Return to Home
                        </Button>
                      </Link>
                    </Box>
                  </Box>
                )}
              </Grid>

              {/* Studio Info Sidebar */}
              <Grid item xs={12} lg={4}>
                <Card>
                  <Box sx={{ 
                    height: 200, 
                    bgcolor: 'grey.300', 
                    position: 'relative',
                    borderRadius: '4px 4px 0 0'
                  }}>
                    <Chip 
                      label={studio.type}
                      sx={{ 
                        position: 'absolute', 
                        top: 16, 
                        left: 16,
                        bgcolor: 'background.paper'
                      }}
                    />
                  </Box>
                  
                  <CardContent>
                    <Typography variant="h5" sx={{ mb: 1 }}>
                      {studio.name}
                    </Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                      <LocationOn sx={{ fontSize: 20, color: 'text.secondary' }} />
                      <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                        {studio.location}
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                      <Rating value={studio.rating} readOnly size="small" />
                      <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                        {studio.rating} ({studio.reviews} reviews)
                      </Typography>
                    </Box>

                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
                      <Box>
                        <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 'medium' }}>
                          About this studio
                        </Typography>
                        <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                          {studio.description}
                        </Typography>
                      </Box>
                      
                      <Box>
                        <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 'medium' }}>
                          Amenities
                        </Typography>
                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                          {studio.amenities.map((amenity, index) => (
                            <Chip 
                              key={index} 
                              label={amenity} 
                              size="small"
                              variant="outlined"
                            />
                          ))}
                        </Box>
                      </Box>

                      <Divider />
                      <Box>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                          <AttachMoney sx={{ color: 'purple', fontSize: 24 }} />
                          <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'purple', textTransform:'none' }}>
                            From ₹{studio.basePrice}/hour
                          </Typography>
                        </Box>
                        <Typography variant="caption" sx={{ color: 'text.secondary' }}>
                          Prices may vary by time of day
                        </Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Container>
        </Box>
      </main>
      <ClientFooter />
    </div>
  );
}
